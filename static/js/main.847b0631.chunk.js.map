{"version":3,"sources":["components/todo/todo.component.jsx","components/listViewer/listViewer.component.jsx","components/addToDo/addToDo.component.jsx","todosData.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","todo","deleteItem","id","text","className","onClick","ListViewer","toDoList","map","key","AddToDo","addTODO","initialFormState","useState","setTodo","onSubmit","e","preventDefault","type","placeholder","name","value","onChange","event","target","todosData","completed","App","setToDoList","uid","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAIaA,G,kBAAO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACnBC,EAAaF,EAAbE,GAAIC,EAASH,EAATG,KACZ,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,aAAaD,GAC3B,4BAAQC,UAAU,eAAeC,QAAS,kBAAMJ,EAAWC,SCOlDI,EAVI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUN,EAAiB,EAAjBA,WAC9B,OACE,yBAAKG,UAAU,eACZG,EAASC,KAAI,SAACR,GAAD,OACZ,kBAAC,EAAD,CAAMS,IAAKT,EAAKE,GAAIF,KAAMA,EAAMC,WAAYA,S,cC2BrCS,G,MAjCC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACXC,EAAmB,CAAET,KAAM,IADF,EAEPU,mBAASD,GAFF,mBAExBZ,EAFwB,KAElBc,EAFkB,KAgB/B,OACE,yBAAKV,UAAU,cACb,0BAAMW,SATY,SAACC,GACrBA,EAAEC,iBACGjB,IACLW,EAAQX,GACRc,EAAQF,MAMJ,2CACA,2BACEM,KAAK,OACLC,YAAY,aACZC,KAAK,OACLC,MAAOrB,EAAKG,KACZmB,SArBkB,SAACC,GAAW,IAAD,EACXA,EAAMC,OAAtBJ,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,MACdP,EAAQ,eAAKd,EAAN,eAAaoB,EAAOC,QAqBvB,4BAAQH,KAAK,UAAb,gBClBOO,EAbG,CACd,CAAEtB,KAAM,sBAAuBD,GAAI,EAAGwB,WAAW,GACjD,CAAEvB,KAAM,mCAAoCD,GAAI,EAAGwB,WAAW,GAC9D,CAAEvB,KAAM,0BAA2BD,GAAI,EAAGwB,WAAW,GACrD,CAAEvB,KAAM,kCAAmCD,GAAI,EAAGwB,WAAW,GAC7D,CAAEvB,KAAM,gBAAiBD,GAAI,EAAGwB,WAAW,GAC3C,CAAEvB,KAAM,6BAA8BD,GAAI,EAAGwB,WAAW,GACxD,CAAEvB,KAAM,wBAAyBD,GAAI,EAAGwB,WAAW,GACnD,CAAEvB,KAAM,yBAA0BD,GAAI,EAAGwB,WAAW,GACpD,CAAEvB,KAAM,uBAAwBD,GAAI,EAAGwB,WAAW,GAClD,CAAEvB,KAAM,+BAAgCD,GAAI,GAAIwB,WAAW,IC4BhDC,EA3BH,WAAO,IAAD,EACgBd,mBAASY,GADzB,mBACTlB,EADS,KACCqB,EADD,KAchB,OACE,yBAAKxB,UAAU,aACb,0CACA,kBAAC,EAAD,CAASO,QAdG,SAAAX,GACdA,EAAKE,GAAK2B,cACV7B,EAAK0B,WAAY,EACjBE,EAAY,GAAD,mBAAKrB,GAAL,CAAeP,QAYxB,kBAAC,EAAD,CAAYO,SAAUA,EAAUN,WARjB,SAACC,GAClB0B,EAAYrB,EAASuB,QAAO,SAAA9B,GAAI,OAAIA,EAAKE,KAAOA,WCVhC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.847b0631.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./todo.styles.css\";\n\nexport const ToDo = ({ todo, deleteItem }) => {\n  const { id, text } = todo;\n  return (\n    <div className=\"todo\">\n      <li className=\"todo-item\">{text}</li>\n      <button className=\"fas fa-trash\" onClick={() => deleteItem(id)} />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./listViewer.styles.css\";\n\nimport { ToDo } from \"../todo/todo.component\";\n\nconst ListViewer = ({ toDoList, deleteItem }) => {\n  return (\n    <div className=\"list-viewer\">\n      {toDoList.map((todo) => (\n        <ToDo key={todo.id} todo={todo} deleteItem={deleteItem} />\n      ))}\n    </div>\n  );\n};\n\nexport default ListViewer;\n","import React, { useState } from \"react\";\n\nimport \"./addToDo.styles.css\";\n\nconst AddToDo = ({ addTODO }) => {\n  const initialFormState = { text: \"\" };\n  const [todo, setTodo] = useState(initialFormState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setTodo({ ...todo, [name]: value });\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (!todo) return;\n    addTODO(todo);\n    setTodo(initialFormState);\n  };\n\n  return (\n    <div className=\"input-form\">\n      <form onSubmit={submitHandler}>\n        <label>Add Todo</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add a TODO\"\n          name=\"text\"\n          value={todo.text}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddToDo;\n","const todosData = [\n    { text: 'Finish The TODO app', id: 1, completed: false },\n    { text: 'Make Custom CSS for the TODO APP', id: 2, completed: false },\n    { text: 'Finish the Redux Course', id: 3, completed: true },\n    { text: 'Write logic for the hangman APP', id: 4, completed: false },\n    { text: 'Watch The 100', id: 5, completed: false },\n    { text: \"Read Computer Network book\", id: 6, completed: false },\n    { text: 'Prepare for the exams', id: 7, completed: false },\n    { text: 'Make a delicious Lunch', id: 8, completed: false },\n    { text: 'Try to talk with her', id: 9, completed: true },\n    { text: 'Try to use indiehackers more', id: 10, completed: false },\n]\n\nexport default todosData;","import React, { useState } from 'react'\n\nimport uid from 'uid';\n\nimport './App.css'\n\nimport ListViewer from './components/listViewer/listViewer.component'\nimport AddToDo from './components/addToDo/addToDo.component'\n\nimport todosData from './todosData';\n\nconst App = () => {\n  const [toDoList, setToDoList] = useState(todosData)\n\n  const addTODO = todo => {\n    todo.id = uid();\n    todo.completed = false;\n    setToDoList([...toDoList, todo])\n\n  }\n\n  const deleteItem = (id) => {\n    setToDoList(toDoList.filter(todo => todo.id !== id))\n  }\n\n  return (\n    <div className='container'>\n      <h1>TODO LIST </h1>\n      <AddToDo addTODO={addTODO} />\n      <ListViewer toDoList={toDoList} deleteItem={deleteItem} />\n\n    </div>\n  )\n\n\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}